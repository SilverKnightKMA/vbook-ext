name: Create Release Plugins

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  create_zips:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Zip folders
        run: |
          python <<EOF
          import json
          import os
          import zipfile
          from datetime import datetime

          plugin_data = []

          def zip_dir(dir_path, output_path):
              with zipfile.ZipFile(output_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                  icon_path = os.path.join(dir_path, 'icon.png')
                  plugin_json_path = os.path.join(dir_path, 'plugin.json')
                  src_path = os.path.join(dir_path, 'src') # Có thể là file hoặc thư mục

                  if os.path.exists(icon_path):
                      zipf.write(icon_path, 'icon.png')
                  if os.path.exists(plugin_json_path):
                      zipf.write(plugin_json_path, 'plugin.json')
                  if os.path.exists(src_path):
                      if os.path.isfile(src_path):
                          zipf.write(src_path, 'src')
                      elif os.path.isdir(src_path):
                          for root, _, files in os.walk(src_path):
                              for file in files:
                                  file_path = os.path.join(root, file)
                                  zipf.write(file_path, os.path.join('src', os.path.relpath(file_path, src_path)))

          root_dir = '.' # Thư mục gốc của repository

          # Xóa các file không nằm trong thư mục nào
          print("Deleting loose files in workspace...")
          for item in os.listdir(root_dir):
              item_path = os.path.join(root_dir, item)
              if os.path.isfile(item_path):
                  print(f"Deleting file: {item_path}")
                  os.remove(item_path)
          print("Loose file deletion complete.")
          
          for item in os.listdir(root_dir):
              item_path = os.path.join(root_dir, item)
              if os.path.isdir(item_path):
                  plugin_json_path = os.path.join(item_path, 'plugin.json')
                  icon_path = os.path.join(item_path, 'icon.png')
                  src_path = os.path.join(item_path, 'src')

                  if os.path.exists(src_path) and os.path.exists(icon_path) and os.path.exists(plugin_json_path):
                      zip_filename = f"{item}.zip"
                      zip_filepath = os.path.join('.', zip_filename)
                      print(f"Zipping folder: {item} to {zip_filename}")
                      zip_dir(item_path, zip_filepath)
                      print(f"Created: {zip_filepath}")

                      # Đọc thông tin từ plugin.json
                      try:
                          with open(plugin_json_path, 'r') as f:
                              plugin_info = json.load(f)
                              metadata = plugin_info.get('metadata', {})
                              plugin_data.append({
                                  "name": metadata.get('name'),
                                  "author": metadata.get('author'),
                                  "path": f"https://github.com/SilverKnightKMA/vbook-ext/releases/latest/download/{zip_filename}",
                                  "version": metadata.get('version'),
                                  "source": metadata.get('source'),
                                  "icon": f"https://raw.githubusercontent.com/SilverKnightKMA/vbook-ext/refs/heads/main/{item}/icon.png",
                                  "description": metadata.get('description'),
                                  "type": metadata.get('type'),
                                  "locale": metadata.get('locale')
                              })
                      except Exception as e:
                          print(f"Error reading plugin.json in {item}: {e}")

          # Tạo file plugin.json tổng
          output_plugin_json = {
              "metadata": {
                  "author": "SilverKnightKMA",
                  "description": "Danh sách các plugin"
              },
              "data": plugin_data
          }

          with open('plugin.json', 'w') as outfile:
              json.dump(output_plugin_json, outfile, indent=2, ensure_ascii=False)
              print("Created plugin.json")
          EOF

      - name: Upload plugin to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./*
          tag: ${{ github.run_id }}
          release_name: ${{ github.sha }}
          make_latest: true
          overwrite: true
          file_glob: true
